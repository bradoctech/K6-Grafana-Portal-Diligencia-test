name: K6 Load Testing

# Executa o workflow em push e pull_request
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Definindo o ambiente de execução
jobs:
  k6-test:
    runs-on: windows-latest

    steps:
      # Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # Instalação do Chocolatey (gerenciador de pacotes no Windows)
      - name: Install Chocolatey
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force; `
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; `
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      # Instalação do K6
      - name: Install K6
        run: |
          choco install k6 -y

      # Executa o teste de carga K6
      - name: Run K6 Load Test
        run: |
          k6 run .\testes\load_test_Portal_Diligencia.js

      # Verifica se o arquivo de relatório foi criado
      - name: Check if report file exists
        run: |
          if (Test-Path -Path ./results/k6-results/post-load-test-report.html) {
            Write-Host "Report file exists."
          } else {
            Write-Host "Report file does not exist."
            exit 1
          }

      # Listar conteúdo do diretório de resultados
      - name: List results directory
        run: |
          dir ./results/k6-results/

      # Publica os resultados como artefato (opcional)
      - name: Upload K6 Results
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: k6-results
          path: ./results/k6-results/post-load-test-report.html

      # Notificação no GitHub sobre falha de testes K6
      - name: Fail if test fails
        if: failure()
        run: exit 1
